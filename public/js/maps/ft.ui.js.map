{"version":3,"sources":["ft.ui.js"],"names":["showRoute","waypoints","map","removeObjects","getObjects","routingParameters","mode","representation","i","length","router","platform","getRoutingService","calculateRoute","onResult","error","alert","message","centerMap","pos","len","cons","setCenter","lat","lng","setZoom","movin","console","info","moveout","tap","evt","target","bb","$","addClass","addorRemoveMark","start","animatedSvg","icon","coords","marker","allObj","removeObject","H","DomIcon","DomMarker","addEventListener","addObject","result","route","routeShape","strip","wps","routeLine","mp","objs","response","shape","waypoint","geo","Strip","forEach","point","parts","split","pushLatLngAlt","mappedPosition","latitude","longitude","Polyline","style","strokeColor","lineWidth","arrows","fillColor","width","frequency","push","addObjects","setViewBounds","getBounds"],"mappings":"AA8CE,QAASA,WAAUC,WACpBC,IAAIC,cAAcD,IAAIE,aAQtB,KAAI,GALGC,oBACLC,KAAQ,cACRC,eAAkB,WAGZC,EAAI,EAAGA,EAAGP,UAAUQ,OAAQD,IACnCH,kBAAkB,WAAaG,GAAKP,UAAUO,EAI5C,IAAIE,QAASC,SAASC,mBAKtBF,QAAOG,eAAeR,kBAAmBS,SACzC,SAASC,OACPC,MAAMD,MAAME,WAuDhB,QAASC,WAAUC,IAAKC,KACzB,KAAMC,MAAO,KACVnB,KAAIoB,WAAWC,IAAIJ,IAAII,IAAKC,IAAIL,IAAIK,MAChCJ,MAAIA,IAAM,GACdlB,IAAIuB,QAAQJ,KAAKD,KA9HnB,GAAIM,OAAQ,WACVC,QAAQC,KAAK,UAGXC,QAAU,WACZF,QAAQC,KAAK,YAGXE,IAAM,SAASC,KACjBJ,QAAQC,KAAKG,IAAIC,OAAOC,IACxBC,EAAEH,KAAKI,SAAS,kBAGdC,gBAAkB,SAASjB,IAAKkB,OAQlC,IAAK,GALNJ,IACAK,YACAC,KACAC,OACAC,OALKC,OAASxC,IAAIE,aAMRI,EAAE,EAAEA,EAAEkC,OAAOjC,OAAOD,IAE3B,GADAyB,GAAKS,OAAOlC,GAAGyB,GACZA,IAAOA,GAAGV,KAAOJ,IAAII,KAAOU,GAAGT,KAAOL,IAAIK,IAE3C,WADAtB,KAAIyC,aAAaD,OAAOlC,GAI5B6B,QACFnC,IAAIC,cAAcD,IAAIE,cAEhBkC,YAAc,wCAGdA,YAAc,gCAElBC,KAAO,GAAIK,GAAE1C,IAAI2C,QAAQP,aACzBE,OAASrB,IACTsB,OAAS,GAAIG,GAAE1C,IAAI4C,UAAUN,QAASD,KAAMA,OAC5CE,OAAOM,iBAAiB,eAAgBrB,OACxCe,OAAOM,iBAAiB,eAAgBlB,SACxCY,OAAOM,iBAAiB,MAAOjB,KAC/B5B,IAAI8C,UAAUP,SA8BZ3B,SAAW,SAASmC,QACtB,GAAIC,OACFC,WACAC,MACHC,IACAC,UACAC,GACAC,OACC,IAAGP,OAAOQ,SAASP,MAAO,CAExBA,MAAQD,OAAOQ,SAASP,MAAM,GAE9BC,WAAaD,MAAMQ,MAEtBL,IAAMH,MAAMS,SAGTP,MAAQ,GAAIR,GAAEgB,IAAIC,MAGlBV,WAAWW,QAAQ,SAASC,OAC1B,GAAIC,OAAQD,MAAME,MAAM,IACxBb,OAAMc,cAAcF,MAAM,GAAIA,MAAM,KAKzC,KAAI,GAAIxD,GAAE,EAAGA,EAAI6C,IAAI5C,OAAQD,IAC5B+C,GAAKF,IAAI7C,GAAG2D,eACN,GAAH3D,EACF4B,iBAAiBb,IAAIgC,GAAGa,SAAU5C,IAAI+B,GAAGc,YAAW,GAEpDjC,iBAAiBb,IAAIgC,GAAGa,SAAU5C,IAAI+B,GAAGc,WAIxCf,WAAY,GAAIV,GAAE1C,IAAIoE,SAASlB,OAC7BmB,OAASC,YAAa,MAAOC,UAAW,GAC9CC,QAASC,UAAW,UAAWC,MAAM,EAAGnE,OAAO,EAAGoE,UAAU,KAE3DrB,KAAKsB,KAAKxB,WAGPpD,IAAI6E,WAAWvB,MAGftD,IAAI8E,cAAc1B,UAAU2B","file":"ft.ui.js","sourcesContent":["  var movin = function() {\n    console.info('movin');\n  };\n  \n  var moveout = function() {\n    console.info('moveout');\n  };\n\n  var tap = function(evt) {\n    console.info(evt.target.bb);\n    $(evt).addClass(\"mark-item-big\");\n  };\n  \n  var addorRemoveMark = function(pos, start) {\n    // if mark exsited, remove it\n    var allObj = map.getObjects(), \n\t  bb, \n\t  animatedSvg, \n\t  icon, \n\t  coords, \n\t  marker;\n    for (var i=0;i<allObj.length;i++){\n      bb = allObj[i].bb;\n      if(bb && (bb.lat == pos.lat && bb.lng == pos.lng)){\n        map.removeObject(allObj[i]);\n        return;\n      }\n    };\n\tif(start){\n\t\tmap.removeObjects(map.getObjects());\n\t\t// mark not exsited, add it\n        animatedSvg = \"<div class='mark-item-start'>S</div>\";\n\t} else {\n\t\t// mark not exsited, add it\n        animatedSvg = \"<div class='mark-item'></div>\";\n\t}\t\n    icon = new H.map.DomIcon(animatedSvg);\n    coords = pos;\n    marker = new H.map.DomMarker(coords, {icon: icon});\n    marker.addEventListener('pointerenter', movin);\n    marker.addEventListener('pointerleave', moveout);\n    marker.addEventListener('tap', tap);\n    map.addObject(marker);\n  };\n  \n  //route \n  function showRoute(waypoints){\t\n\tmap.removeObjects(map.getObjects());\n  \n\t// Create the parameters for the routing request:\n    var routingParameters = {\t\n\t  'mode': 'fastest;car',\n\t  'representation': 'display'\t  \n\t};\n\t\n\tfor(var i = 0; i< waypoints.length; i++){\n\t\troutingParameters['waypoint' + i] = waypoints[i];\n\t};\n\t\n\t// Get an instance of the routing service:\n    var router = platform.getRoutingService();\n    \n    // Call calculateRoute() with the routing parameters,\n    // the callback and an error callback function (called if a\n    // communication error occurs):\n    router.calculateRoute(routingParameters, onResult,\n    function(error) {\n      alert(error.message);\n    });\t\n  };\n\n  // Define a callback function to process the routing response:\n  var onResult = function(result) {\n    var route,\n      routeShape,\n      strip,\n\t  wps,\n\t  routeLine,\n\t  mp,\n\t  objs = [];\t  \n    if(result.response.route) {\n      // Pick the first route from the response:\n      route = result.response.route[0];\n      // Pick the route's shape:\n      routeShape = route.shape;\n\t  \n\t  wps = route.waypoint;\n\n      // Create a strip to use as a point source for the route line\n      strip = new H.geo.Strip();\n\n      // Push all the points in the shape into the strip:\n      routeShape.forEach(function(point) {\n        var parts = point.split(',');\n        strip.pushLatLngAlt(parts[0], parts[1]);\n      });\n\n\t  // Retrieve the mapped positions of the requested waypoints:\n\t  // Retrieve the mapped positions of the requested waypoints:\n\t  for(var i=0; i < wps.length; i++){\n\t\t  mp = wps[i].mappedPosition;\n\t\t  if(i==0){\n\t\t\t  addorRemoveMark({lat:mp.latitude, lng:mp.longitude},true);\n\t\t  } else {\n\t\t\t  addorRemoveMark({lat:mp.latitude, lng:mp.longitude});\n\t\t  }\n\t  }\t  \n      // Create a polyline to display the route:\n      routeLine = new H.map.Polyline(strip, {\n        style: { strokeColor: 'red', lineWidth: 4 },\n\t\tarrows: {fillColor: '#F8E71C', width:3, length:3, frequency:5}\n      });\n\t  objs.push(routeLine);    \n\n      // Add the route polyline and the two markers to the map:\n      map.addObjects(objs);\n\n      // Set the map's viewport to make the whole route visible:\n      map.setViewBounds(routeLine.getBounds());\n    }\n  }; \n\t\n  function centerMap(pos, len){\n\tconst cons = 86.48;\n    map.setCenter({lat:pos.lat, lng:pos.lng});\n    if(!len)len = 1;\n    map.setZoom(cons/len);\n  };"],"sourceRoot":"/source/"}